import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;

import javax.swing.JOptionPane;

public class EletronicStore {
    private ArrayList<Equipamento> equipamentos;

    public EletronicStore() {
        this.equipamentos = new ArrayList<Equipamento>();
    }
    public String[] leValores (String [] dadosIn){
        String [] dadosOut = new String [dadosIn.length];

        for (int i = 0; i < dadosIn.length; i++)
            dadosOut[i] = JOptionPane.showInputDialog("Entre com "+ dadosIn[i] +": ");

        return dadosOut;
    }
    public Notebook leNotebook(){

        String [] valores;
        String [] nomeVal = {"Nome", "marca", "modelo", "processador", "memoriaRam"};
        valores = leValores (nomeVal);

        int memoriaRam = this.retornaInteiro(valores[4]);


        return new Notebook (valores[0], valores[1], valores[2], valores[3], memoriaRam);
    }

    public Smartphone leSmartphone(){
        String [] valores;
        String [] nomeVal = {"Nome", "marca", "modelo","quantidadeChipsOperadora","tamanhoDaTela"};
        valores = leValores (nomeVal);

        int quantidadeChipsOperadora = this.retornaInteiro(valores[3]);
        int tamanhoDaTela = this.retornaInteiro(valores[4]);

        return new Smartphone (valores[0], valores[1], valores[2], quantidadeChipsOperadora, tamanhoDaTela);
    }
    private boolean intValido(String s) {
        try {
            Integer.parseInt(s); // Tenta transformar uma string em inteiro
            return true;
        } catch (NumberFormatException e) { // Se não consegue transformar, erro
            return false;
        }
    }
    public int retornaInteiro(String entrada) { // retorna um valor inteiro
        int numInt;

        //Tenta converter o valor de entrada para inteiro, senão permanece no loop
        while (!this.intValido(entrada)) {
            entrada = JOptionPane.showInputDialog(null, "Valor incorreto!\n\nDigite um número inteiro.");
        }
        return Integer.parseInt(entrada);
    }

    public void salvaEquipamento (ArrayList<Equipamento>  equipamentos){
        ObjectOutputStream outputStream = null;
        try {
            outputStream = new ObjectOutputStream
                    (new FileOutputStream("c:\\temp\\EletronicStore.dados"));
            for (int i=0; i < equipamentos.size(); i++)
                outputStream.writeObject(equipamentos.get(i));
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Impossível criar arquivo!");
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {  // Fecha arquivo ObjectOutputStream
            try {
                if (outputStream != null) {
                    outputStream.flush();
                    outputStream.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
    @SuppressWarnings("finally")
    public ArrayList<Equipamento> recuperaMamiferos (){
        ArrayList<Equipamento> equipamentosTemp = new ArrayList<Equipamento>();

        ObjectInputStream inputStream = null;

        try {
            inputStream = new ObjectInputStream
                    (new FileInputStream("c:\\temp\\EletronicStore.dados"));
            Object obj = null;
            while ((obj = inputStream.readObject()) != null) {
                if (obj instanceof Equipamento) {
                    equipamentosTemp.add((Equipamento) obj);
                }
            }
        } catch (EOFException ex) { // quando EOF é alcançado
            System.out.println("Fim de arquivo.");
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Arquivo com equipamentos NÃO existe!");
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {  // Fecha arquivo ObjectInputStream
            try {
                if (inputStream != null) {
                    inputStream.close();
                }
            } catch (final IOException ex) {
                ex.printStackTrace();
            }
            return equipamentosTemp;
        }
    }
    public void menuEletronicStore (){
        String menu = "";
        String entrada;
        int    opc1, opc2;
        do {
            menu = "Controle EletronicStore\n" +
                    "Opções:\n" +
                    "1. Entrar equipamentos\n" +
                    "2. Exibir equipamentos\n" +
                    "3. Limpar equipamentos\n" +
                    "4. Gravar equipamentos\n" +
                    "5. Recuperar equipamentos\n" +
                    "9. Sair";
            entrada = JOptionPane.showInputDialog (menu + "\n\n");
            opc1 = this.retornaInteiro(entrada);

            switch (opc1) {
                case 1:// Entrar dados
                    menu = "Entrada de equipamentos\n" +
                        "Opções:\n" +
                        "1. Smartphone\n" +
                        "2. Notebook\n";

                    entrada = JOptionPane.showInputDialog (menu + "\n\n");
                    opc2 = this.retornaInteiro(entrada);

                    switch (opc2){
                        case 1: equipamentos.add((Equipamento) leSmartphone());
                            break;
                        case 2: equipamentos.add((Equipamento) leNotebook());
                            break;
                        default:
                            JOptionPane.showMessageDialog(null, "Entrada NÃO válida!");
                    }

                    break;
                case 2: // Exibir dados
                    if (equipamentos.size() == 0) {
                        JOptionPane.showMessageDialog(null, "Entre com equipamentos ...");
                        break;
                    }
                    String dados = "";
                    for (int i=0; i < equipamentos.size(); i++)    {
                        dados +=   equipamentos.get(i).toString() + "---------------\n";
                    }
                    JOptionPane.showMessageDialog(null,dados);
                    break;
                case 3: // Limpar Dados
                    if ( equipamentos.size() == 0) {
                        JOptionPane.showMessageDialog(null, "Entre com equipamentos ...");
                        break;
                    }
                    equipamentos.clear();
                    JOptionPane.showMessageDialog(null, "Dados LIMPOS com sucesso!");
                    break;
                case 4: // Grava Dados
                    if (equipamentos.size() == 0) {
                        JOptionPane.showMessageDialog(null, "Entre com equipamentos ... ");
                        break;
                    }
                    salvaEquipamento(equipamentos);
                    JOptionPane.showMessageDialog(null, "Dados SALVOS com sucesso!");
                    break;
                case 5: // Recupera Dados
                    equipamentos = recuperaMamiferos();
                    if ( equipamentos.size() == 0) {
                        JOptionPane.showMessageDialog(null,"Sem dados para apresentar.");
                        break;
                    }
                    JOptionPane.showMessageDialog(null,"Dados RECUPERADOS com sucesso!");
                    break;
                case 9:
                    JOptionPane.showMessageDialog(null, "Fim do aplicativo EletronicStore");
                    break;
            }
        } while (opc1 != 9);
    }
    public static void main (String [] args){
        EletronicStore pet = new EletronicStore ();
            pet.menuEletronicStore();
    }
}
